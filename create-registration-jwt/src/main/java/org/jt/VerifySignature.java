package org.jt;

import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.RSASSASigner;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.jwk.source.RemoteJWKSet;
import com.nimbusds.jose.proc.JWSKeySelector;
import com.nimbusds.jose.proc.JWSVerificationKeySelector;
import com.nimbusds.jose.proc.SecurityContext;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import com.nimbusds.jwt.proc.ConfigurableJWTProcessor;
import com.nimbusds.jwt.proc.DefaultJWTProcessor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.Date;
import java.util.UUID;

public class VerifySignature {

    private static final Logger logger = LoggerFactory.getLogger(VerifySignature.class);


//    private static final String ulsterJWT = "eyJraWQiOiJqMWVONGZKT3JieFM4bUItNFJHejJ6X0RnMFUiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJyZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2FsZyI6IlJTQS1PQUVQLTI1NiIsImdyYW50X3R5cGVzIjpbImF1dGhvcml6YXRpb25fY29kZSIsInJlZnJlc2hfdG9rZW4iLCJjbGllbnRfY3JlZGVudGlhbHMiXSwic3ViamVjdF90eXBlIjoicHVibGljIiwiYXBwbGljYXRpb25fdHlwZSI6IndlYiIsImlzcyI6IjhDUG03M1dNV05IemxSWUNJaVBLckEiLCJyZWRpcmVjdF91cmlzIjpbImh0dHBzOlwvXC91bHN0ZXJiYW5rLXRwcC5pZVwvb3BlbmJhbmtpbmdcL2NiIl0sInRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kIjoidGxzX2NsaWVudF9hdXRoIiwidG9rZW5fZW5kcG9pbnRfc2lnbmluZ19hbGciOiJSUzI1NiIsInNvZnR3YXJlX3N0YXRlbWVudCI6ImV5SmhiR2NpT2lKUVV6STFOaUlzSW10cFpDSTZJbVJUTTBoRmVuTjVWa3BQVEhwUlZraEpWV3RQU2tVeVNYRnJiVE41U0dJMFFsbGZVR0pDUlZSWGFsazlJaXdpZEhsd0lqb2lTbGRVSW4wLmV5SnBjM01pT2lKUGNHVnVRbUZ1YTJsdVp5Qk1kR1FpTENKcFlYUWlPakUxTlRZME56UTNNVE1zSW1wMGFTSTZJakV4WVRrd05XRTNaVFF5TmpReU5UUWlMQ0p6YjJaMGQyRnlaVjlsYm5acGNtOXViV1Z1ZENJNkluTmhibVJpYjNnaUxDSnpiMlowZDJGeVpWOXRiMlJsSWpvaVZHVnpkQ0lzSW5OdlpuUjNZWEpsWDJsa0lqb2lPRU5RYlRjelYwMVhUa2g2YkZKWlEwbHBVRXR5UVNJc0luTnZablIzWVhKbFgyTnNhV1Z1ZEY5cFpDSTZJamhEVUcwM00xZE5WMDVJZW14U1dVTkphVkJMY2tFaUxDSnpiMlowZDJGeVpWOWpiR2xsYm5SZmJtRnRaU0k2SWtSRlV5QjBaWE4wSUdOc2FXVnVkQ0lzSW5OdlpuUjNZWEpsWDJOc2FXVnVkRjlrWlhOamNtbHdkR2x2YmlJNkluUmxjM1FnVkZCUUlHTnNhV1Z1ZENCbWIzSWdSRVZUSUhSbGMzUnpJQ0lzSW5OdlpuUjNZWEpsWDNabGNuTnBiMjRpT2pFdU1Dd2ljMjltZEhkaGNtVmZZMnhwWlc1MFgzVnlhU0k2SW1oMGRIQnpPaTh2Y0c5c2FXTjVMblZzYzNSbGNtSmhibXN0ZEhCd0xtbGxJaXdpYzI5bWRIZGhjbVZmY21Wa2FYSmxZM1JmZFhKcGN5STZXeUpvZEhSd2N6b3ZMM1ZzYzNSbGNtSmhibXN0ZEhCd0xtbGxMMjl3Wlc1aVlXNXJhVzVuTDJOaUlsMHNJbk52Wm5SM1lYSmxYM0p2YkdWeklqcGJJa0ZKVTFBaUxDSlFTVk5RSWl3aVEwSlFTVWtpWFN3aWIzSm5ZVzVwYzJGMGFXOXVYMk52YlhCbGRHVnVkRjloZFhSb2IzSnBkSGxmWTJ4aGFXMXpJanA3SW1GMWRHaHZjbWwwZVY5cFpDSTZJa05DU1VsU1JTSXNJbkpsWjJsemRISmhkR2x2Ymw5cFpDSTZJa015TVRFM05TSXNJbk4wWVhSMWN5STZJa0ZqZEdsMlpTSXNJbUYxZEdodmNtbHpZWFJwYjI1eklqcGJleUp0WlcxaVpYSmZjM1JoZEdVaU9pSkhRaUlzSW5KdmJHVnpJanBiSWtGSlUxQWlMQ0pRU1ZOUUlpd2lRMEpRU1VraVhYMHNleUp0WlcxaVpYSmZjM1JoZEdVaU9pSkpSU0lzSW5KdmJHVnpJanBiSWtGSlUxQWlMQ0pRU1ZOUUlpd2lRMEpRU1VraVhYMHNleUp0WlcxaVpYSmZjM1JoZEdVaU9pSk9UQ0lzSW5KdmJHVnpJanBiSWtGSlUxQWlMQ0pRU1ZOUUlpd2lRMEpRU1VraVhYMWRmU3dpYzI5bWRIZGhjbVZmYkc5bmIxOTFjbWtpT2lKb2RIUndjem92TDJsdFlXZGxjeTUxYkhOMFpYSmlZVzVyTFhSd2NDNXBaUzlzYjJkdkxuQnVaeUlzSW05eVoxOXpkR0YwZFhNaU9pSkJZM1JwZG1VaUxDSnZjbWRmYVdRaU9pSXdNREUxT0RBd01EQXhXa1ZhTVdsQlFVZ2lMQ0p2Y21kZmJtRnRaU0k2SWxWc2MzUmxjaUJDWVc1cklFbHlaV3hoYm1RZ1JFRkRJaXdpYjNKblgyTnZiblJoWTNSeklqcHVkV3hzTENKdmNtZGZhbmRyYzE5bGJtUndiMmx1ZENJNkltaDBkSEJ6T2k4dmEyVjVjM1J2Y21VdWIzQmxibUpoYm10cGJtZDBaWE4wTG05eVp5NTFheTh3TURFMU9EQXdNREF4V2tWYU1XbEJRVWd2TURBeE5UZ3dNREF3TVZwRldqRnBRVUZJTG1wM2EzTWlMQ0p2Y21kZmFuZHJjMTl5WlhadmEyVmtYMlZ1WkhCdmFXNTBJam9pYUhSMGNITTZMeTlyWlhsemRHOXlaUzV2Y0dWdVltRnVhMmx1WjNSbGMzUXViM0puTG5Wckx6QXdNVFU0TURBd01ERmFSVm94YVVGQlNDOXlaWFp2YTJWa0x6QXdNVFU0TURBd01ERmFSVm94YVVGQlNDNXFkMnR6SWl3aWMyOW1kSGRoY21WZmFuZHJjMTlsYm1Sd2IybHVkQ0k2SW1oMGRIQnpPaTh2YTJWNWMzUnZjbVV1YjNCbGJtSmhibXRwYm1kMFpYTjBMbTl5Wnk1MWF5OHdNREUxT0RBd01EQXhXa1ZhTVdsQlFVZ3ZPRU5RYlRjelYwMVhUa2g2YkZKWlEwbHBVRXR5UVM1cWQydHpJaXdpYzI5bWRIZGhjbVZmYW5kcmMxOXlaWFp2YTJWa1gyVnVaSEJ2YVc1MElqb2lhSFIwY0hNNkx5OXJaWGx6ZEc5eVpTNXZjR1Z1WW1GdWEybHVaM1JsYzNRdWIzSm5MblZyTHpBd01UVTRNREF3TURGYVJWb3hhVUZCU0M5eVpYWnZhMlZrTHpoRFVHMDNNMWROVjA1SWVteFNXVU5KYVZCTGNrRXVhbmRyY3lJc0luTnZablIzWVhKbFgzQnZiR2xqZVY5MWNta2lPaUpvZEhSd2N6b3ZMM0J2YkdsamVTNTFiSE4wWlhKaVlXNXJMWFJ3Y0M1cFpTSXNJbk52Wm5SM1lYSmxYM1J2YzE5MWNta2lPaUpvZEhSd2N6b3ZMM1JsY20xekxuVnNjM1JsY21KaGJtc3RkSEJ3TG1sbElpd2ljMjltZEhkaGNtVmZiMjVmWW1Wb1lXeG1YMjltWDI5eVp5STZiblZzYkgwLkttSERjekVmd2R6OHg1MUZnMFRDZ3k0TFUwZkY5NkJUOE9DdlJNbE43QWVYd0xMYzBrQ0NwbEV0c3FXclQ4dEZSMDF5ZEdEbXpaS1hPR2lRcjd5WnhlaHFRWUVEY2hiUWlYY0FqaExMYXhvLXFPTDgxRllZazhOdW52dmEzeXd2Qmx3MWZ1ZFNPWXBpdHpHS1ZGQ01IcFJBTFlzaktURXZlQ0NVYUJORzRhc2RSSlFmUXd3V2V3VU8xeXV6YUxyWnMxUmhwa1JJQTZjWGZHMjhnS2d1M0ZiVUlZZWExR1JXelgwWG82UWFnbVpuSnZkalVMTnVaaEtWdjFmeXBGSmwzSUJzSDQ4bG43d25FaFZSOWNWUEpSdnR3SklZWXZWQnhTYzNyZXRyMW5uTjV4QXlZa0RqaDFqazE2a0VOODVfU3l5YkRtQTdoMkRWN0kzdDh6bGxEdyIsImF1ZCI6Imh0dHBzOlwvXC9vYi51bHN0ZXIudXNlaW5maW5pdGUuaW8iLCJzY29wZSI6WyJBSVNQIiwiUElTUCJdLCJyZXF1ZXN0X29iamVjdF9zaWduaW5nX2FsZyI6IlJTMjU2IiwiZXhwIjoxNTU2NTMxODU0LCJyZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2VuYyI6IkExMjhDQkMtSFMyNTYiLCJpYXQiOjE1NTY1MzE3OTQsImp0aSI6IjJlNTE3MThhLTBmMjUtNDMxNS1iYmQzLTA3NmMzNzMzNjBlZiIsInJlc3BvbnNlX3R5cGVzIjpbImNvZGUiLCJ0b2tlbiIsImNvZGUgaWRfdG9rZW4iXSwiaWRfdG9rZW5fc2lnbmVkX3Jlc3BvbnNlX2FsZyI6IlJTMjU2In0.Y--8652PvbCK7-PNVH33cc366bQE5uUx6s1QOlXIpfB3Fua72--tHgXIoSWSiFJLTwU2HPJUR42xIO2m4lDWluVW759iuFK9IhDS_RfBQGndhbf5c5gcP5cOuWAaTezZj418D0Mdchx8cD81rYYdgaUi0A6noX7BCNXDeWOvkcEaYjFWUHG5aekcvRSWFRSqNXjf_hEWBehEtRFICnZU9JB13TsS93XUSeqe2k4yGIWE7YjPqM0ciHmTXEIwRFU88JtmcqY_Q0S4VDuUv29VMuCd2Ndx3O52nMBq6S7tHd55FvHBigSSRKBlo09H9S8Zr7CbPMOOeanAqwrKFJb4wv";
//    private static final String dingallJWT = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjlJYzRhMlRVWTJTcmlzQ1ZnY0VFZWZ0aVY4SSJ9.eyJzb2Z0d2FyZV9zdGF0ZW1lbnQiOiJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW1SVE0waEZlbk41VmtwUFRIcFJWa2hKVld0UFNrVXlTWEZyYlRONVNHSTBRbGxmVUdKQ1JWUlhhbGs5SWl3aWRIbHdJam9pU2xkVUluMC5leUpwWVhRaU9qRTFORGN3TkRnME1USXNJbWx6Y3lJNklrOXdaVzVDWVc1cmFXNW5JRXgwWkNJc0ltcDBhU0k2SWpRNVJYcGxZMVJzYVZVeFlXZFdSa3N3YTFWYVFVOGlMQ0p2Y21kZlkyOXVkR0ZqZEhNaU9sdDdJbVZ0WVdsc0lqb2lma0ZRU1ZObGNuWnBZMlZFWlhOclFISmljeTVqYjIwaUxDSnVZVzFsSWpvaVFuVnphVzVsYzNNaUxDSndhRzl1WlNJNklpczBOQ0EzTnpZZ09UazFJRGN4T0RraUxDSjBlWEJsSWpvaVFuVnphVzVsYzNNaWZTeDdJbVZ0WVdsc0lqb2lma0ZRU1ZObGNuWnBZMlZFWlhOclFISmljeTVqYjIwaUxDSnVZVzFsSWpvaVZHVmphRzVwWTJGc0lpd2ljR2h2Ym1VaU9pSXJORFFnTnpjMklEazVOU0EzTVRnNUlpd2lkSGx3WlNJNklsUmxZMmh1YVdOaGJDSjlYU3dpYjNKblgybGtJam9pTURBeE5UZ3dNREF3TUdwbWQwSTBRVUZKSWl3aWIzSm5YMnAzYTNOZlpXNWtjRzlwYm5RaU9pSm9kSFJ3Y3pvdkwydGxlWE4wYjNKbExtOXdaVzVpWVc1cmFXNW5kR1Z6ZEM1dmNtY3VkV3N2TURBeE5UZ3dNREF3TUdwbWQwSTBRVUZKTHpBd01UVTRNREF3TURCcVpuZENORUZCU1M1cWQydHpJaXdpYjNKblgycDNhM05mY21WMmIydGxaRjlsYm1Sd2IybHVkQ0k2SW1oMGRIQnpPaTh2YTJWNWMzUnZjbVV1YjNCbGJtSmhibXRwYm1kMFpYTjBMbTl5Wnk1MWF5OHdNREUxT0RBd01EQXdhbVozUWpSQlFVa3ZjbVYyYjJ0bFpDOHdNREUxT0RBd01EQXdhbVozUWpSQlFVa3VhbmRyY3lJc0ltOXlaMTl1WVcxbElqb2lWR2hsSUZKdmVXRnNJRUpoYm1zZ2IyWWdVMk52ZEd4aGJtUWdVR3hqSWl3aWIzSm5YM04wWVhSMWN5STZJa0ZqZEdsMlpTSXNJbTl5WjJGdWFYTmhkR2x2Ymw5amIyMXdaWFJsYm5SZllYVjBhRzl5YVhSNVgyTnNZV2x0Y3lJNmV5SmhkWFJvYjNKcGMyRjBhVzl1Y3lJNlczc2liV1Z0WW1WeVgzTjBZWFJsSWpvaVIwSWlMQ0p5YjJ4bGN5STZXeUpCU1ZOUUlpd2lVRWxUVUNKZGZTeDdJbTFsYldKbGNsOXpkR0YwWlNJNklrbEZJaXdpY205c1pYTWlPbHNpUVVsVFVDSXNJbEJKVTFBaVhYMHNleUp0WlcxaVpYSmZjM1JoZEdVaU9pSk9UQ0lzSW5KdmJHVnpJanBiSWtGSlUxQWlMQ0pRU1ZOUUlsMTlYU3dpWVhWMGFHOXlhWFI1WDJsa0lqb2lSa05CUjBKU0lpd2ljbVZuYVhOMGNtRjBhVzl1WDJsa0lqb2lNVEUwTnpJMElpd2ljM1JoZEhWeklqb2lRV04wYVhabEluMHNJbk52Wm5SM1lYSmxYMk5zYVdWdWRGOWtaWE5qY21sd2RHbHZiaUk2SWxKQ1V5QlBjR1Z1SUVKaGJtdHBibWNnVTJWeWRtbGpaU0JVWlhOMElFRmpZMjkxYm5RZ1ptOXlJRVJoZG1sa0lFbHVaMkZzYkNJc0luTnZablIzWVhKbFgyTnNhV1Z1ZEY5cFpDSTZJakpNVHpsNE5WcGlkbGx2YzBST05VdHllRlZqYm1naUxDSnpiMlowZDJGeVpWOWpiR2xsYm5SZmJtRnRaU0k2SWtSaGRtbGtJRWx1WjJGc2JDQW9RVWxUVUNCUVNWTlFLU0lzSW5OdlpuUjNZWEpsWDJOc2FXVnVkRjkxY21raU9pSm9kSFJ3Y3pvdkwzZHBiR3h2ZDJKeWIyOXJMV052Ym5OMWJIUnBibWN1WTI5dEwyOWlMMk5zYVdWdWRDOWpiR2xsYm5RdWFIUnRJaXdpYzI5bWRIZGhjbVZmWlc1MmFYSnZibTFsYm5RaU9pSnpZVzVrWW05NElpd2ljMjltZEhkaGNtVmZhV1FpT2lJeVRFODVlRFZhWW5aWmIzTkVUalZMY25oVlkyNW9JaXdpYzI5bWRIZGhjbVZmYW5kcmMxOWxibVJ3YjJsdWRDSTZJbWgwZEhCek9pOHZhMlY1YzNSdmNtVXViM0JsYm1KaGJtdHBibWQwWlhOMExtOXlaeTUxYXk4d01ERTFPREF3TURBd2FtWjNRalJCUVVrdk1reFBPWGcxV21KMldXOXpSRTQxUzNKNFZXTnVhQzVxZDJ0eklpd2ljMjltZEhkaGNtVmZhbmRyYzE5eVpYWnZhMlZrWDJWdVpIQnZhVzUwSWpvaWFIUjBjSE02THk5clpYbHpkRzl5WlM1dmNHVnVZbUZ1YTJsdVozUmxjM1F1YjNKbkxuVnJMekF3TVRVNE1EQXdNREJxWm5kQ05FRkJTUzl5WlhadmEyVmtMekpNVHpsNE5WcGlkbGx2YzBST05VdHllRlZqYm1ndWFuZHJjeUlzSW5OdlpuUjNZWEpsWDJ4dloyOWZkWEpwSWpvaWFIUjBjSE02THk5M2FXeHNiM2RpY205dmF5MWpiMjV6ZFd4MGFXNW5MbU52YlM5dllpOXNiMmR2TDJ4dloyOHVjRzVuSWl3aWMyOW1kSGRoY21WZmJXOWtaU0k2SWt4cGRtVWlMQ0p6YjJaMGQyRnlaVjl2Ymw5aVpXaGhiR1pmYjJaZmIzSm5Jam9pSWl3aWMyOW1kSGRoY21WZmNHOXNhV041WDNWeWFTSTZJbWgwZEhCek9pOHZkMmxzYkc5M1luSnZiMnN0WTI5dWMzVnNkR2x1Wnk1amIyMHZiMkl2Y0c5c2FXTjVMM0J2YkdsamVTNW9kRzBpTENKemIyWjBkMkZ5WlY5eVpXUnBjbVZqZEY5MWNtbHpJanBiSW1oMGRIQnpPaTh2ZDJsc2JHOTNZbkp2YjJzdFkyOXVjM1ZzZEdsdVp5NWpiMjB2YjJJdmNtVmthWEpsWTNRdklsMHNJbk52Wm5SM1lYSmxYM0p2YkdWeklqcGJJa0ZKVTFBaUxDSlFTVk5RSWwwc0luTnZablIzWVhKbFgzUnZjMTkxY21raU9pSm9kSFJ3Y3pvdkwzZHBiR3h2ZDJKeWIyOXJMV052Ym5OMWJIUnBibWN1WTI5dEwyOWlMM1JsY20xekwzUmxjbTF6TG1oMGJTSXNJbk52Wm5SM1lYSmxYM1psY25OcGIyNGlPakF1TVgwLlFmaUdlVm0xaWQ4UDZKbVdNNlJ5VFM0MHlCSmxlVFhLLWNISTBHYjNQWFZ0SVhETmVFUnlKaXBLLU04eTNoMDhzeFNpLVFGNHRlckJpX0dqcnBVVUxKT2w0bG82ZUE5WS04S1FBdmZiQ2hDb3pFbVFRcFJaeFZ3czhmbDhVRU1XZjVqVjcyZF9aLVRwaGtTS3QwRnktSy1iQnJ5RmROR20zT05LQks1QkZzbjdiXzFRVU53cVlmZ0hnd3plMmR3U3NNcDROQzdWbTFDRWpYV0xPNTM0U2tuSGVKTnFnUUJzS1VXNHlveVZJRHRIVjBERzFwNmZYTktlTUJMeDZjRXlEVUlVZE5NU1F4RmJ5c1A0QlpfUE14aWpPUTVxdnVmUC10WEZrUXBYbGd3aE9EMURfVkduMFFiaWEzQVQ3RVVLa2VjbnlhajYwb1pNLThHajY2UVAxQSIsInRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kIjoidGxzX2NsaWVudF9hdXRoIiwidG9rZW5fZW5kcG9pbnRfc2lnbmluZ19hbGciOiJSUzI1NiIsInJlcXVlc3Rfb2JqZWN0X3NpZ25pbmdfYWxnIjoiUlMyNTYiLCJpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnIjoiUlMyNTYiLCJhcHBsaWNhdGlvbl90eXBlIjoid2ViIiwiZ3JhbnRfdHlwZXMiOlsiYXV0aG9yaXphdGlvbl9jb2RlIiwicmVmcmVzaF90b2tlbiIsImNsaWVudF9jcmVkZW50aWFscyJdLCJyZWRpcmVjdF91cmlzIjpbImh0dHBzOi8vd2lsbG93YnJvb2stY29uc3VsdGluZy5jb20vb2IvcmVkaXJlY3QvIl0sImp0aSI6IjFiMDY2ODBkLWQ1OTItNDQyMS1hYmU0LWMyNzE1NTQyNGRlZiIsImF1ZCI6Imh0dHBzOi8vb2IucmJzLnVzZWluZmluaXRlLmlvIiwiaXNzIjoiMkxPOXg1WmJ2WW9zRE41S3J4VWNuaCIsImV4cCI6MTU1NjExOTEyNSwiaWF0IjoxNTU2MTE1NTI1fQ.oWIzJ4HvQZWI-gxB4PigwmNjF2AWhty7ZordrnZ8VfdINMH7AjVO5pMKtEx-csf9Z9aVBGDxmV0BwQMbRp9qazQxi5B4_NA3rXFG3AAdPFWrZZWJOXQNo0lcjWhgqjVYdKZspWVSE91_oaRAj1WXQ-Uw_4CIU6GpOhQ3j42rTm-LMgLVx7h6pKxch3pFxUsT98r7mHu9HId2UiWd2oYrb2c_a6MXDqi8gKdNIb4JKng4pgxh6WBO-OjadxRBtYmHwq9v-AhH6La9fHhzaaQHTpQO6Iwq_YPnhfofG0Iq5o6YGdwMd-RBSVxsUCZtB5Vf-hrjcqhs8RfuAodGLilMOA";
    private static final String SIGNING_KID = "j1eN4fJOrbxS8mB-4RGz2z_Dg0U";
    private static final String KEY_FILE_DIRECTORY = "/Users/james/dev/ideaProjects/dynamic-reg/create-registration-jwt/src/main/resources/keys";
    private static final String KEY_FILE_NAME = "8CPm73WMWNHzlRYCIiPKrA_signing.key";

    public static void main(String[] args) {
        try {

            String jwt = build();
            logger.info("JWT Constructed->"+jwt);
            ConfigurableJWTProcessor jwtProcessor = new DefaultJWTProcessor();
            // ulster
            JWKSource keySource = new RemoteJWKSet(new URL("http://prdtst-keystore-obd.s3-website-eu-west-1.amazonaws.com/0015800001ZEZ1iAAH/0015800001ZEZ1iAAH.jwks"));

            JWSAlgorithm expectedJWSAlg = JWSAlgorithm.RS256;

            JWSKeySelector boSelector = new JWSVerificationKeySelector(expectedJWSAlg, keySource);
            jwtProcessor.setJWSKeySelector(boSelector);

            SecurityContext ctx = null;
            JWTClaimsSet claimsSet = jwtProcessor.process(jwt, ctx);
            logger.info(claimsSet.toString());
        }catch(Exception e){
            logger.error("++Verify error++", e);
        }
    }

    public static String build() throws JOSEException, NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        JWSHeader header =  new JWSHeader.Builder(JWSAlgorithm.RS256)
                .keyID(SIGNING_KID)
                .type(JOSEObjectType.JWT)
                .build();

        JWSSigner signer = new RSASSASigner(getSigningKey());

        JWTClaimsSet claimsSet = buildClaimSet();

        SignedJWT signedJWT = new SignedJWT(header, claimsSet);

        // Compute the RSA signature
        signedJWT.sign(signer);

        // To serialize to Base64 compact form
        String regJwtString = signedJWT.serialize();

        return  regJwtString;



    }

    private static JWTClaimsSet buildClaimSet() {
        return new JWTClaimsSet.Builder()
                .audience("https://rbs.useinfinite.io")
                .issuer("JT")
                .issueTime(new Date(new Date().getTime()))
                .expirationTime(new Date(new Date().getTime() + (60 * 60 * 1000)))
                .claim("jti", UUID.randomUUID().toString())
                .build();

    }

    private static PrivateKey getSigningKey() throws NoSuchAlgorithmException, InvalidKeySpecException, IOException {
        String privateKeyContent = new String(Files.readAllBytes(Paths.get(KEY_FILE_DIRECTORY, KEY_FILE_NAME)));

        privateKeyContent = privateKeyContent.replaceAll("\\n", "").replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "");

        KeyFactory kf = KeyFactory.getInstance("RSA");

        PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyContent));
        return kf.generatePrivate(keySpecPKCS8);


    }
}
